#include <iostream>
#include <cstdlib>
#include <algorithm>
#include <ctime>
#include <ratio>
#include <chrono>
#include <vector>
using namespace std::chrono;

void NhapNgauNhien(int*, int, int&);
void BinarySearch(int*, int, int);

int main()
{
	int n = 100;

	for (int i = 0; i < 30 * 10; i++)
	{
		if (i % 10 == 0 && i > 0)
			n = int(n * 1.5);
		int* array = new int[n];
		int so = 0;
		NhapNgauNhien(array, n, so);
		std::sort(array, array + n);

		high_resolution_clock::time_point start = high_resolution_clock::now();
		BinarySearch(array, n, so);
		duration<double> time_span = high_resolution_clock::now() - start;
		std::cout << n << "\t" << time_span.count() << std::endl;
		delete[] array;
	}

	return 0;
}

void NhapNgauNhien(int* array, int n, int& so)
{
	int* kiem_tra = new int[1000000];
	for (int i = 0; i < 1000000; i++)
		kiem_tra[i] = 0;
	for (int i = 0; i < n; i++)
	{
		array[i] = rand() % 1000000;
		kiem_tra[array[i]] = 1;
	}
	do
	{
		so = rand() % 1000000;
	} while (kiem_tra[so] != 0);
	delete[] kiem_tra;
}

void BinarySearch(int *array, int n, int so)
{
	int left = 0;
	int right = n - 1;
	while (left <= right)
	{
		int mid = (left + right) / 2;
		if (so == array[mid])
			return;
		else
			if (so < array[mid])
				right = mid - 1;
			else
				left = mid + 1;
	}
	return;
}