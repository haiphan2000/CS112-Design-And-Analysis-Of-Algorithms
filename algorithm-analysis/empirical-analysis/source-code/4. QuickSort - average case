#include <iostream>
#include <algorithm>
#include <utility>
#include <cstdlib>
#include <ctime>
#include <ratio>
#include <chrono>
#include <vector>
using namespace std::chrono;

void NhapNgauNhien(int*, int);
int LomutoPartition(int*, int, int);
void QuickSort(int*, int, int);

int main()
{
	int n = 10;

	for (int i = 0; i < 50; i++)
	{
		if (i > 0)
			n = int(n * 1.3);
		int* array = new int[n];
		NhapNgauNhien(array, n);
		std::sort(array, array + n);

		high_resolution_clock::time_point start = high_resolution_clock::now();
		QuickSort(array, 0, n - 1);
		duration<double> time_span = high_resolution_clock::now() - start;
		std::cout << n << "\t" << time_span.count() << std::endl;
		delete[] array;
	}

	return 0;
}

void NhapNgauNhien(int* array, int n)
{
	for (int i = 0; i < n; i++)
		array[i] = rand() % 100000;
}

int LomutoPartition(int* array, int left, int right)
{
	int pivot = array[right];
	int i = left - 1;
	for (int j = left; j < right; j++)
	{
		if (array[j] <= pivot)
		{
			i = i + 1;
			std::swap(array[i], array[j]);
		}
	}
	std::swap(array[i + 1], array[right]);
	return i + 1;
}

void QuickSort(int* array, int left, int right)
{
	if (left < right)
	{
		int pivot = LomutoPartition(array, left, right);
		QuickSort(array, left, pivot - 1);
		QuickSort(array, pivot + 1, right);
	}
}