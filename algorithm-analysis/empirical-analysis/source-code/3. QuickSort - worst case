#include <iostream>
#include <algorithm>
#include <utility>

void NhapNgauNhien(int*, int);
int HoarePartition(int*, int, int, long&);
void QuickSort(int*, int, int, long&);

int main()
{
	int n = 10;

	for (int i = 0; i < 40; i++)
	{
		if (i > 0)
			n = int(n * 1.3);
		int* array = new int[n];
		NhapNgauNhien(array, n);
		std::sort(array, array + n);

		long so_sanh = 0;
		QuickSort(array, 0, n - 1, so_sanh);
		std::cout << n << "\t" << so_sanh << std::endl;
		delete[] array;
	}

	return 0;
}

void NhapNgauNhien(int* array, int n)
{
	for (int i = 0; i < n; i++)
		array[i] = rand() % 10000;
}

int HoarePartition(int* array, int left, int right, long& so_sanh)
{
	int pivot = array[right];
	int i = left - 1;
	for (int j = left; j < right; j++)
	{
		if (++so_sanh && array[j] <= pivot)
		{
			i = i + 1;
			std::swap(array[i], array[j]);
		}
	}
	std::swap(array[i + 1], array[right]);
	return i + 1;
}

void QuickSort(int* array, int left, int right, long& so_sanh)
{
	if (++so_sanh && left < right)
	{
		int pivot = HoarePartition(array, left, right, so_sanh);
		QuickSort(array, left, pivot - 1, so_sanh);
		QuickSort(array, pivot + 1, right, so_sanh);
	}
}